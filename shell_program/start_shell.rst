系统启动与登录shell
========================

系统启动流程
-------------

系统启动时运行的第一个进程是init。init的进程号是1。init进程初始化系统，启动另一个进程来打开终端线路并设置标准输入（stdin，通常来自键盘）、标准输出（stdout，通常来自屏幕）和标准错误输出
（stderr，通常来自屏幕）。完成这些设置后，终端上出现登陆提示。

用户输入信息后，有/bin/login验证用户名和密码，通过后，login程序开始设置初始环境，即初始化一组定义工作环境的变量，如HOME、SHELL、USER和LOGNAME通过passwd文件中的信息赋值。login程序结束
时，会执行passwd指定的shell程序。passwd没有指定shell程序时，默认执行Bourne shell。此时的shell就是登录shell。

shell程序启动后，首先执行系统级的初始化文件，然后执行用户级的初始化文件。完成shell运行环境的初始化后，启动窗口界面或者字符界面，进入等待输入的状态。

解析命令行
-----------

用户可以在shell提示输入一系列的字符串形式的命令及相关参数，shell会读取命令和参数并进行解析。首先shell会将用户的输入分解为一个或多个token，token之间是空格或制表符来分割，命令行以换行符
结束。接下来，shell会判断命令是内置命令还是磁盘上的可执行程序，如果是内置命令，则直接执行并返回结果。如果不是内置命令，shell首先在路径变量指示的目录下寻找命令程序。找到后，会创建一个
子进程来执行该程序，同时shell进入睡眠或等待状态直至程序执行完毕。程序执行完后会返回shell，屏幕上又出现了命令提示符。shell处理的流程如下：

    * 执行历史命令替代（视情况而定）；
    * 命令行分解为token；
    * 更新历史命令（视情况而定）；
    * 引用的处理；
    * 别名替代和函数的定义（视情况而定）；
    * 设置重定向，后台进程和管道；
    * 执行变量替换（如$name, $user等）；
    * 执行命令替换（如`date`代替Today）；
    * 执行称为globbing的文件名替换（如cat abc.??，rm *.c等）；
    * 执行命令；

命令类型
---------

shell提示符下输入的命令可以使别名、函数、内置命令或磁盘上的可执行程序。别名是原命令的缩写，可用于C&TC、bash和Korn等shell，函数可用于Bourne、bash和Korn等shell。别名和函数是在shell的内存空间
定义的，内置命令是shell的内部程序。可执行程序是在磁盘上。shell通过路径变量来在磁盘上定位可执行程序。执行命令前，shell按如下顺序判断命令类型：别名 > 关键字 > 函数 > 内置命令 > 可执行程序。
